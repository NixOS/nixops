<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xml:id="chap-overview">

<title>Overview</title>

<para>This chapter gives a quick overview of how to use NixOps.</para>

<simplesect><title>Deploying a VirtualBox VM</title>

<para>NixOps deploys machines on the basis of a declarative
description of what those machines should do, and where they should be
deployed to.  These descriptions are specified in the <emphasis>Nix
expression language</emphasis> used by the Nix package manager.  <xref
linkend="ex-logical.nix" /> shows a minimal specification of a network
consisting of only one logical machine named
<literal>webserver</literal>.</para>

<example xml:id="ex-logical.nix">
  <title><filename>trivial.nix</filename>: logical network specification</title>
<programlisting>
{
  network.description = "Web server";

  webserver =
    { config, pkgs, ... }:
    { services.httpd.enable = true;
      services.httpd.adminAddr = "alice@example.org";
      services.httpd.documentRoot = "${pkgs.valgrind}/share/doc/valgrind/html";
    };
}
</programlisting>
</example>

<para>This specification consists of a set of top-level attributes
describing logical machines (namely <varname>webserver</varname>) and
meta-information (namely <varname>network.description</varname>).
Each attribute not named <varname>network</varname> describes a
logical machine.  The value of each logical machine attribute is a
<emphasis>NixOS configuration module</emphasis>, which describes the
desired configuration of the corresponding machine.  Thus, the logical
machine <literal>webserver</literal> should have the Apache
<command>httpd</command> web server running, and its document root
(rather arbitrarily for demonstration purposes) should be the
documentation of the Valgrind package.</para>

<para>To deploy this machine, we also need to provide configuration
options that tell NixOps to what environment it should be deployed.
<xref linkend="ex-physical-vbox.nix" /> specifies that
<literal>webserver</literal> should be deployed as a VirtualBox
instance.</para>

<example xml:id="ex-physical-vbox.nix">
  <title><filename>trivial-vbox.nix</filename>: VirtualBox physical network specification</title>
<programlisting>
{
  webserver =
    { config, pkgs, ... }:
    { deployment.targetEnv = "virtualbox";
      deployment.virtualbox.memorySize = 1024; # megabytes
    };
}
</programlisting>
</example>

<para>Before we can deploy the network we need to use the command
<command>nixops create</command> to create a <emphasis>NixOps
deployment</emphasis> that contains any state associated with the
deployment (such as information about instantiated VMs).  At creation
time, we need to specify the Nix expressions that constitute the
complete deployment specification.  So to create a deployment for
deploying the Apache web server to VirtualBox, we would do:

<screen>
$ nixops create ./trivial.nix ./trivial-vbox.nix -d trivial
33bced96-5f26-11e1-b9d7-9630d48abec1
</screen>

Here <literal>-d trivial</literal> gives the symbolic name
<literal>trivial</literal> to the deployment.  Deployments can be
identified in two ways: using the UUID printed by <command>nixops
create</command>, or using the symbolic name you specified at creation
time.</para>

<para>You can print a list of existing deployments using
<command>nixops list</command>:

<screen>
+--------------------------------------+-----------+--------------+------------+------------+
|                 UUID                 |   Name    | Description  | # Machines |    Type    |
+--------------------------------------+-----------+--------------+------------+------------+
| 33bced96-5f26-11e1-b9d7-9630d48abec1 |  trivial  |  Web server  |     0      |            |
+--------------------------------------+-----------+--------------+------------+------------+
</screen>
</para>

<para>The command <command>nixops info</command> shows the current
deployment state:

<screen>
$ nixops info -d trivial
Network UUID: 33bced96-5f26-11e1-b9d7-9630d48abec1
Network description: Web server

+-----------+--------+------------+-------------+------------+
|   Name    | Status |    Type    | Resource Id | IP address |
+-----------+--------+------------+-------------+------------+
| webserver |  New   | virtualbox |             |            |
+-----------+--------+------------+-------------+------------+
</screen>

The machine status <literal>New</literal> indicates that the logical
machine <literal>webserver</literal> hasn’t been created yet.  The
<option>-d</option> option specifies which deployment to use; you can
use the symbolic name (<literal>-d trivial</literal>) or the UUID
(<literal>-d 33bced96-5f26-11e1-b9d7-9630d48abec1</literal>).  You
can also set the the environment variable
<envar>NIXOPS_DEPLOYMENT</envar>.</para>

<para>The actual deployment is done by running <command>nixops
deploy</command>:

<screen>
$ nixops deploy -d trivial
creating VirtualBox VM ‘webserver’...
Virtual machine 'nixops-33bced96-5f26-11e1-b9d7-9630d48abec1-webserver' is created and registered.
Clone hard disk created in format 'VDI'. UUID: 5a0b0771-7e03-4fab-9c2f-e95888b57db3
Waiting for VM "nixops-33bced96-5f26-11e1-b9d7-9630d48abec1-webserver" to power on...
VM "nixops-33bced96-5f26-11e1-b9d7-9630d48abec1-webserver" has been successfully started.
waiting for IP address of ‘webserver’........................... 192.168.56.101
waiting for SSH on ‘webserver’...
building all machine configurations...
building path(s) `/nix/store/ybrny9h744q8i3x026ccfmdav8qnw7pd-nixos-version'
building path(s) `/nix/store/zxw279xhl6l8yl94gnka8aqv1kkcrrd4-os-release'
fetching path `/nix/store/pn43d3llpsm3pc1ywaxccmw8pmzjqgz0-valgrind-3.7.0'...
…
copying closure to machine ‘webserver’...
copying 376 missing paths to ‘root@192.168.56.101’...
importing path `/nix/store/jfcs9xnfbmiwqs224sb0qqsybbfl3sab-linux-headers-2.6.35.14'
…
activating new configuration on machine ‘webserver’...
updating GRUB 2 menu...
activating the configuration...
…
starting new service ‘httpd’...
</screen>

NixOps performs the following steps to do the deployment:

<itemizedlist>

  <listitem><para>It creates missing machines.  In this case, a
  VirtualBox instance for the logical machine
  <literal>webserver</literal> is started.  NixOps then waits to
  obtain its IP address.</para></listitem>

  <listitem><para>It builds the NixOS machine configurations locally.
  For instance, here Valgrind is built or downloaded because our
  machine configuration has a dependency on it.</para></listitem>

  <listitem><para>It copies the closure of each machine configuration
  to the corresponding machine.</para></listitem>

  <listitem><para>It activates the configuration on each machine.  For
  instance, it starts the <literal>httpd</literal> systemd service on
  the <literal>webserver</literal> machine.  This is the only step
  that has a visible effect; all prior steps do not affect the active
  configuration of the machines.</para></listitem>

</itemizedlist>

</para>

<para>The <command>nixops info</command> command will show that a
machine was created:

<screen>
$ nixops info -d trivial
Network UUID: 33bced96-5f26-11e1-b9d7-9630d48abec1
Network description: Web server

+-----------+--------+------------+-----------------------------------------------------+----------------+
|   Name    | Status |    Type    |                    Resource Id                      |   IP address   |
+-----------+--------+------------+-----------------------------------------------------+----------------+
| webserver |   Up   | virtualbox | nixops-33bced96-5f26-11e1-b9d7-9630d48abec1-machine | 192.168.56.101 |
+-----------+--------+------------+-----------------------------------------------------+----------------+
</screen>

</para>

<para>Visit <literal>http://192.168.56.101</literal> in a web browser
should now show the Valgrind documentation.  You can also log in to
the virtual machine as <literal>root</literal>:

<screen>
$ nixops ssh -d trivial webserver
connecting to 192.168.56.101...
[root@webserver:~]#
</screen>

The command <command>nixops ssh</command> is a convenience wrapper
around <command>ssh</command> that passes the right IP address and SSH
identity for the specified logical machine.  (NixOps automatically
creates a unique SSH key pair for communicating with each VirtualBox
instance.)</para>

<para>Redeployment after making a change to the specification is
simply a matter of running <command>nixops deploy</command> again.  If
we do this for the example, NixOps will notice that the
<literal>webserver</literal> machine already exists and that most or
all dependencies are already present, so it won’t create a new
VirtualBox instance or need to build and copy a lot of dependencies.
Thus redeployment typically only takes a few seconds:

<screen>
$ time nixops deploy -d trivial
building all machine configurations...
copying closure to machine ‘webserver’...
activating new configuration on machine ‘webserver’...
real    0m3.700s
</screen>

</para>

<para>If you want to get rid of the virtual machines created by
NixOps, you can run <command>nixops destroy</command>:

<screen>
warning: are you sure you want to destroy EC2 machine ‘webserver’? (y/N) y
$ nixops destroy -d trivial
destroying VirtualBox VM ‘webserver’...
</screen>

You can use the option <option>--confirm</option> to confirm all
questions.  This is useful for automated deployment, but potentially
dangerous.</para>

</simplesect>


<simplesect><title>Deploying multiple machines</title>

<para>A network consisting of only one logical machine is not very
exciting.  <xref linkend="ex-logical-multi.nix" /> shows a network
consisting of three machines: a load balancer (named
<literal>proxy</literal>) that uses Apache’s
<literal>mod_proxy</literal> to do reverse proxying, and two backend
web servers (<literal>backend1</literal> and
<literal>backend2</literal>) that serve the actual content.  One
important thing to note is that if you want to refer to another
machine (e.g. in a configuration file), you can use a hostname equal
to the logical name of the machine, as in the line

<programlisting>
BalancerMember http://backend1 retry=0
</programlisting>

This works because NixOps generates a <filename>/etc/hosts</filename>
file that contains entries for all the logical machines in the
network, mapping names to each machine’s IP address.  Also note that
because the two backend machines have identical configurations, we can
use a let-binding to define the configuration only once.</para>

<example xml:id="ex-logical-multi.nix">
  <title><filename>load-balancer.nix</filename>: logical network specification</title>
<programlisting>
let

  backend =
    { config, pkgs, ... }:
    { services.httpd.enable = true;
      services.httpd.adminAddr = "alice@example.org";
      services.httpd.documentRoot = "${pkgs.valgrind}/share/doc/valgrind/html";
    };

in

{
  network.description = "Load balancing network";

  proxy =
    { config, pkgs, nodes, ... }:
    { services.httpd.enable = true;
      services.httpd.adminAddr = "bob@example.org";
      services.httpd.extraModules = ["proxy_balancer"];
      services.httpd.extraConfig =
        ''
          &lt;Proxy balancer://cluster>
            Allow from all
            BalancerMember http://backend1 retry=0
            BalancerMember http://backend2 retry=0
          &lt;/Proxy>
          ProxyPass         /    balancer://cluster/
          ProxyPassReverse  /    balancer://cluster/
        '';
    };

  backend1 = backend;
  backend2 = backend;
}
</programlisting>
</example>

<para>To deploy it, we need a physical specification, shown in <xref
linkend="ex-physical-multi.nix" />.  Deployment is as follows:

<screen>
$ nixops create ./load-balancer.nix ./load-balancer-vbox.nix -d load-balancer-vbox
$ nixops deploy -d load-balancer-vbox
</screen>

Note that NixOps creates and deploys the VMs in parallel to speed
things up.</para>

<example xml:id="ex-physical-multi.nix">
  <title><filename>load-balancer-vbox.nix</filename>: VirtualBox physical network specification</title>
<programlisting>
let
  vbox = { deployment.targetEnv = "virtualbox"; };
in
{ proxy    = vbox;
  backend1 = vbox;
  backend2 = vbox;
}
</programlisting>
</example>

</simplesect>


<simplesect><title>Deploying to Amazon EC2</title>

<para><xref linkend="ex-physical-multi-ec2.nix" /> shows a physical
specification that deploys the load balancer network to Amazon’s
Elastic Compute Cloud (EC2).  It states that the three machines need
to be instantiated in EC2 region <literal>eu-west-1</literal>.  It
also specifies a non-machine cloud resource: namely, the EC2 key pair
to be used to access the machine via SSH.  (It is possible to use
manually created EC2 key pairs, but it’s easier to let NixOps
provision them.)</para>

<example xml:id="ex-physical-multi-ec2.nix">
  <title><filename>load-balancer-ec2.nix</filename>: EC2 physical network specification</title>
<programlisting>
let

  region = "eu-west-1";
  accessKeyId = "dev"; # symbolic name looked up in ~/.ec2-keys

  ec2 =
    { resources, ... }:
    { deployment.targetEnv = "ec2";
      deployment.ec2.accessKeyId = accessKeyId;
      deployment.ec2.region = region;
      deployment.ec2.instanceType = "m1.small";
      deployment.ec2.keyPair = resources.ec2KeyPairs.my-key-pair.name;
    };

in
{ proxy    = ec2;
  backend1 = ec2;
  backend2 = ec2;

  # Provision an EC2 key pair.
  resources.ec2KeyPairs.my-key-pair =
    { inherit region accessKeyId; };
}
</programlisting>
</example>

<para>Deployment is as follows:

<screen>
$ nixops create ./load-balancer.nix ./load-balancer-ec2.nix -d load-balancer-ec2
$ nixops deploy -d load-balancer-ec2
my-key-pair> uploading EC2 key pair ‘charon-8e50b4b5-d7f9-11e2-b91c-23f8eaf468f4-my-key-pair’...
backend1...> creating EC2 instance (AMI ‘ami-8badbdff’, type ‘m1.small’, region ‘eu-west-1’)...
backend2...> creating EC2 instance (AMI ‘ami-8badbdff’, type ‘m1.small’, region ‘eu-west-1’)...
proxy......> creating EC2 instance (AMI ‘ami-8badbdff’, type ‘m1.small’, region ‘eu-west-1’)...
backend2...> waiting for IP address...
<replaceable>...</replaceable>
proxy......> activation finished successfully
backend2...> activation finished successfully
backend1...> activation finished successfully
</screen>

Here NixOps has created an EC2 key pair and started three EBS-backed
instances running the default NixOS AMI.  Other than that, deployment
is the same as for VirtualBox: NixOps builds the machine
configurations, copies their closure over to the EC2 instances, and
activates the new configurations.</para>

<para>The command <command>nixops info</command> shows all provisioned
resources, not just machines:

<screen>
$ nixops info -d load-balancer-ec2
<replaceable>...</replaceable>
+-------------+-----------------+----------------------------+---------------------------------------------------------+----------------+
| Name        |      Status     | Type                       | Resource Id                                             | IP address     |
+-------------+-----------------+----------------------------+---------------------------------------------------------+----------------+
| backend1    | Up / Up-to-date | ec2 [eu-west-1a; m1.small] | i-0ec4bc43                                              | 54.228.61.132  |
| backend2    | Up / Up-to-date | ec2 [eu-west-1a; m1.small] | i-0cc4bc41                                              | 54.216.26.111  |
| proxy       | Up / Up-to-date | ec2 [eu-west-1a; m1.small] | i-08c4bc45                                              | 54.216.171.138 |
| my-key-pair | Up / Up-to-date | ec2-keypair [eu-west-1]    | charon-8e50b4b5-d7f9-11e2-b91c-23f8eaf468f4-my-key-pair |                |
+-------------+-----------------+----------------------------+---------------------------------------------------------+----------------+
</screen>
</para>

<para>The resources can be destroyed by running:

<screen>
$ nixops destroy -d load-balancer-ec2
</screen>

This terminates the EC2 instances and deletes the EC2 key pair.</para>

<para>Deployment to EC2 has some prerequisites.

<itemizedlist>

  <listitem><para>Obviously, you need an EC2 account.</para></listitem>

  <listitem><para>You need to add your AWS access key ID and secret
  key to the file <filename>~/.ec2-keys</filename>, as follows:

<programlisting>
AKIAIUTDLWJKSLSJDLDQ Grsjf37cDKKWndklek3jdxnSKE3fkskDLqdldDl/ dev # my AWS development account
</programlisting>

  Here <literal>dev</literal> is a symbolic name for the AWS account,
  which you can use in
  <varname>deployment.ec2.accessKeyId</varname>.</para>

  <para>Alternatively, you can set the environment variables
  <envar>EC2_ACCESS_KEY</envar> and
  <envar>EC2_SECRET_KEY</envar>.</para></listitem>

  <!--
  <listitem><para>You need to create an SSH key pair using the
  <command>ec2-create-keypair</command> command line tool or using the
  AWS web interface, set <varname>deployment.ec2.keyPair</varname> to
  the name of the key pair, and set
  <varname>deployment.ec2.privateKey</varname> to the path of the
  private key.</para></listitem>
  -->

  <listitem><para>You need to ensure that your EC2 security groups are
  set up to allow (at the very least) SSH traffic from your network.
  By default, NixOps uses the security group
  <literal>default</literal>.  You can set the option
  <varname>deployment.ec2.securityGroups</varname> to use other
  security groups:

<programlisting>
deployment.ec2.securityGroups = [ "allow-ssh" "allow-http" ];
</programlisting>

  </para></listitem>

  <listitem><para>You need to set
  <varname>deployment.ec2.region</varname> to the EC2 region you want
  to deploy to.  Note that key pairs and security groups are
  region-specific.</para></listitem>

</itemizedlist>

</para>

</simplesect>


<simplesect><title>Deploying to Hetzner physical machines</title>

<para>In order to deploy to Hetzner machines, you need to have a valid account
to their server management interface, called the <link
xlink:href="https://robot.your-server.de/">Robot</link>. This account is
<emphasis>only</emphasis> used for the initial deployment and the destruction of
a machine. In particular the initial deployment creates a separate Robot account
just for the machine that's going to be created, so a person who has access to
your deployment will only have access to the machines within the deployment and
not <emphasis>all</emphasis> machines that are associated with your main Robot
account. When destroying a machine, the separate admin account is removed as
well.</para>

<para>Of course you need machines where you can deploy to, which can only be
ordered by the Robot's web interface. In the expression of the NixOps network,
you reference these machines by setting
<varname>deployment.hetzner.mainIPv4</varname> to the corresponding main IP
address, to be found in the list of the <literal>Server</literal> tab in the
Robot.</para>

<para>Partitioning of a machine is currently done by using Anaconda's <link
xlink:href="https://fedoraproject.org/wiki/Anaconda/Kickstart">Kickstart</link>
format. By default, it consists of two disks with two swap partitions, one on
each disk and one big ext4 array with RAID1, similiar to the default layout
Hetzner is using for installing their Debian machines. If you want to change the
default, you can use <varname>deployment.hetzner.partitions</varname> to change
the default layout. For example to install a machine with btrfs:

<programlisting>
{
  example = {
    deployment.targetEnv = "hetzner";
    deployment.mainIPv4 = "1.2.3.4";
    deployment.hetzner.partitions = ''
      clearpart --all --initlabel --drives=sda,sdb

      part swap1 --recommended --label=swap1 --fstype=swap --ondisk=sda
      part swap2 --recommended --label=swap2 --fstype=swap --ondisk=sdb

      part btrfs.1 --grow --ondisk=sda
      part btrfs.2 --grow --ondisk=sdb

      btrfs / --data=1 --metadata=1 --label=root btrfs.1 btrfs.2
    '';
  };
}
</programlisting>

This will install NixOS on a machine with the main IP
<replaceable>1.2.3.4</replaceable>, using a swap partition for each drive and
use everything else for a single btrfs volume.</para>

<para>In the previous example, there is no occurence of
<varname>deployment.hetzner.robotUser</varname> and
<varname>deployment.hetzner.robotPass</varname>, you can set the credentials to
your main Robot account there, however it is recommended to use the environment
variables <envar>HETZNER_ROBOT_USER</envar> and
<envar>HETZNER_ROBOT_PASS</envar>, as you only need them for initial deployment
and destruction.</para>

</simplesect>


<simplesect><title>Accessing machines</title>

<para>We have seen above that you can login to individual machines by
doing <literal>nixops ssh <replaceable>name</replaceable></literal>,
where <replaceable>name</replaceable> is the name of the
machine.</para>

<para>It’s also possible to perform a command on all machines:

<screen>
$ nixops ssh-for-each -d load-balancer-ec2 -- df /tmp
backend1...> /dev/xvdb      153899044 192084 145889336   1% /tmp
proxy......> /dev/xvdb      153899044 192084 145889336   1% /tmp
backend2...> /dev/xvdb      153899044 192084 145889336   1% /tmp
</screen>

By default, the command is executed sequentially on each machine.  You
can add the flag <option>-p</option> to execute it in parallel.</para>

</simplesect>


<simplesect><title>Checking machine status</title>

<para>The command <command>nixops check</command> checks the status of
each machine in a deployment.  It verifies that the machine still
exists (i.e. hasn’t been destroyed outside of NixOps), is up (i.e. the
instance has been started) and is reachable via SSH.  It also checks
that any attached disks (such as EBS volumes) are not in a failed
state, and prints the names of any systemd units that are in a failed
state.</para>

<para>For example, for the 3-machine EC2 network shown above, it might
show:

<screen>
$ nixops check -d load-balancer-ec2
+----------+--------+-----+-----------+----------+----------------+---------------+-------+
| Name     | Exists | Up  | Reachable | Disks OK | Load avg.      | Failed units  | Notes |
+----------+--------+-----+-----------+----------+----------------+---------------+-------+
| backend1 | Yes    | Yes | Yes       | Yes      | 0.03 0.03 0.05 | httpd.service |       |
| backend2 | Yes    | No  | N/A       | N/A      |                |               |       |
| proxy    | Yes    | Yes | Yes       | Yes      | 0.00 0.01 0.05 |               |       |
+----------+--------+-----+-----------+----------+----------------+---------------+-------+
</screen>

This indicates that Apache httpd has failed on
<literal>backend1</literal> and that machine
<literal>backend</literal> is not running at all.  In this situation,
you should run <command>nixops deploy --check</command> to repair the
deployment.</para>

</simplesect>

<simplesect><title>Network arguments</title>

<para>In NixOps you can pass in arguments from outside the nix
expression. The network file can be a nix function, which takes a set
of arguments which are passed in externally and can be used to change
configuration values, or even to generate a variable number of
machines in the network.</para>

<para>Here is an example of a network with network arguments:

<screen>
{ maintenance ? false
}:
{
  machine =
    { config, pkgs, ... }:
    { services.httpd.enable = maintenance;
      ...
    };
}
</screen>

This network has a <emphasis>maintenance</emphasis> argument that
defaults to <code>false</code>. This value can be used inside the
network expression to set NixOS option, in this case whether or not
Apache HTTPD should be enabled on the system.
</para>

<para>
You can pass network arguments using the <code>set-args</code> nixops
command. For example, if we want to set the <code>maintenance</code>
argument to <code>true</code> in the previous example, you can run:

<screen>
  $ nixops set-args --arg maintenance true -d &lt;name&gt;
</screen>

The arguments that have been set will show up:

<screen>
$ nixops info -d argtest
Network name: argtest
Network UUID: 634d6273-f9f6-11e2-a004-15393537e5ff
Network description: Unnamed NixOps network
Nix expressions: .../network-arguments.nix
<emphasis>Nix arguments: maintenance = true</emphasis>

+---------+---------------+------+-------------+------------+
| Name    |     Status    | Type | Resource Id | IP address |
+---------+---------------+------+-------------+------------+
| machine | Missing / New | none |             |            |
+---------+---------------+------+-------------+------------+

</screen>

Running <code>nixops deploy</code> after changing the arguments will
deploy the new configuration.

</para>



</simplesect>

<!--

<para>EC2 logical.nix</para>

<para>EC2 deployment</para>

<para>Multiple machines (load balancer)</para>

-->

</chapter>
