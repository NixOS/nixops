<appendix xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xml:id="chap-hacking">

<title>Hacking</title>

<para>This section provides some notes on how to hack on NixOps.  To
get the latest version of NixOps from GitHub:
<screen>
$ git clone git://github.com/NixOS/nixops.git
$ cd nixops
</screen>
</para>

<para>To build it and its dependencies:
<screen>
$ nix-build release.nix -A build.x86_64-linux
</screen>
The resulting NixOps can be run as
<filename>./result/bin/nixops</filename>.</para>

<para>To build all dependencies and start a shell in which all
environment variables (such as <envar>PYTHONPATH</envar>) are set up
so that those dependencies can be found:
<screen>
$ nix-shell release.nix -A build.x86_64-linux --exclude tarball
$ echo $PYTHONPATH
/nix/store/5dbidajmgrvskv7kj6bwrkza8szxkgar-python3-3.7.5/lib/python3.7/site-packages:<replaceable>...</replaceable>
</screen>
You can then run NixOps in your source tree as follows:
<screen>
$ nixops
</screen>
</para>

<para>To run the tests, do

<screen>
$ python3 tests.py
</screen>

Note that some of the tests involve the creation of EC2 resources and
thus cost money.  You must set the environment variable
<envar>EC2_ACCESS_KEY</envar> and (optionally)
<envar>EC2_SECRET_KEY</envar>.  (If the latter is not set, it will be
looked up in <filename>~/.ec2-keys</filename> or in
<filename>~/.aws/credentials</filename>, as described in <xref
linkend="sec-deploying-to-ec2"/>.)  To run a specific test, run
<literal>python3 tests.py
<replaceable>test-name</replaceable></literal>, e.g.

To filter on which backends you want to run functional tests against, you can
filter on one or more tags.


There are also a few NixOS VM tests. These can be run as follows:

<screen>
$ nix-build release.nix -A tests.none_backend
</screen>

</para>
          
<para>Some useful snippets to debug nixops:

Logging

<screen>
# this will not work, because sys.stdout is substituted with log file
print('asdf')

# this will work
self.log('asdf')
from __future__ import print_function; import sys; print('asfd', file=sys.__stdout__)
import sys; import pprint; pprint.pprint(some_structure, stream=sys.__stdout__)
</screen>

To set breakpoint use

<screen>
import sys; import pdb; pdb.Pdb(stdout=sys.__stdout__).set_trace()
</screen>

</para>

</appendix>
